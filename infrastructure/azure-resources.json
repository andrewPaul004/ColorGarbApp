{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environment": {
      "type": "string",
      "allowedValues": ["dev", "prod"],
      "metadata": {
        "description": "Environment name (dev or prod)"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "applicationName": {
      "type": "string",
      "defaultValue": "colorgarb",
      "metadata": {
        "description": "Base name for all resources"
      }
    }
  },
  "variables": {
    "resourcePrefix": "[concat(parameters('applicationName'), '-', parameters('environment'))]",
    "appServicePlanName": "[concat(variables('resourcePrefix'), '-plan')]",
    "webAppName": "[concat(variables('resourcePrefix'), '-api')]",
    "staticWebAppName": "[concat(variables('resourcePrefix'), '-web')]",
    "sqlServerName": "[concat(variables('resourcePrefix'), '-sql')]",
    "sqlDatabaseName": "[concat(variables('resourcePrefix'), '-db')]",
    "redisCacheName": "[concat(variables('resourcePrefix'), '-redis')]",
    "applicationInsightsName": "[concat(variables('resourcePrefix'), '-insights')]",
    "sqlAdministratorLogin": "colorgarb-admin",
    "sqlAdministratorPassword": "[concat('P@ssw0rd', uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2022-03-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[if(equals(parameters('environment'), 'dev'), 'B1', 'S1')]",
        "tier": "[if(equals(parameters('environment'), 'dev'), 'Basic', 'Standard')]"
      },
      "properties": {
        "reserved": true
      },
      "kind": "linux"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[variables('webAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]",
        "[resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOTNETCORE|9.0",
          "alwaysOn": "[if(equals(parameters('environment'), 'prod'), true, false)]",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "appSettings": [
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "[if(equals(parameters('environment'), 'dev'), 'Development', 'Production')]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))).ConnectionString]"
            },
            {
              "name": "ConnectionStrings__DefaultConnection",
              "value": "[concat('Server=tcp:', reference(resourceId('Microsoft.Sql/servers', variables('sqlServerName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', variables('sqlDatabaseName'), ';Persist Security Info=False;User ID=', variables('sqlAdministratorLogin'), ';Password=', variables('sqlAdministratorPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            },
            {
              "name": "ConnectionStrings__Redis",
              "value": "[concat(reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))).hostName, ':', reference(resourceId('Microsoft.Cache/Redis', variables('redisCacheName'))).sslPort, ',password=', listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2020-06-01').primaryKey, ',ssl=True,abortConnect=False')]"
            },
            {
              "name": "Jwt__Key",
              "value": "[concat('jwt-secret-', uniqueString(resourceGroup().id))]"
            },
            {
              "name": "Jwt__Issuer",
              "value": "ColorGarbApi"
            },
            {
              "name": "Jwt__Audience",
              "value": "ColorGarbClient"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Web/staticSites",
      "apiVersion": "2022-03-01",
      "name": "[variables('staticWebAppName')]",
      "location": "[parameters('location')]",
      "properties": {
        "repositoryUrl": "",
        "branch": "[if(equals(parameters('environment'), 'dev'), 'develop', 'main')]",
        "buildProperties": {
          "appLocation": "apps/web",
          "outputLocation": "dist"
        }
      },
      "sku": {
        "name": "[if(equals(parameters('environment'), 'dev'), 'Free', 'Standard')]",
        "tier": "[if(equals(parameters('environment'), 'dev'), 'Free', 'Standard')]"
      }
    },
    {
      "type": "Microsoft.Sql/servers",
      "apiVersion": "2022-05-01-preview",
      "name": "[variables('sqlServerName')]",
      "location": "[parameters('location')]",
      "properties": {
        "administratorLogin": "[variables('sqlAdministratorLogin')]",
        "administratorLoginPassword": "[variables('sqlAdministratorPassword')]",
        "version": "12.0",
        "publicNetworkAccess": "Enabled"
      },
      "resources": [
        {
          "type": "firewallRules",
          "apiVersion": "2022-05-01-preview",
          "name": "AllowAzureServices",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
          ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        }
      ]
    },
    {
      "type": "Microsoft.Sql/servers/databases",
      "apiVersion": "2022-05-01-preview",
      "name": "[concat(variables('sqlServerName'), '/', variables('sqlDatabaseName'))]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Sql/servers', variables('sqlServerName'))]"
      ],
      "sku": {
        "name": "[if(equals(parameters('environment'), 'dev'), 'Basic', 'S1')]",
        "tier": "[if(equals(parameters('environment'), 'dev'), 'Basic', 'Standard')]"
      },
      "properties": {
        "collation": "SQL_Latin1_General_CP1_CI_AS",
        "maxSizeBytes": "[if(equals(parameters('environment'), 'dev'), 2147483648, 268435456000)]"
      }
    },
    {
      "type": "Microsoft.Cache/Redis",
      "apiVersion": "2020-06-01",
      "name": "[variables('redisCacheName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "[if(equals(parameters('environment'), 'dev'), 'Basic', 'Standard')]",
          "family": "C",
          "capacity": "[if(equals(parameters('environment'), 'dev'), 0, 1)]"
        },
        "enableNonSslPort": false,
        "minimumTlsVersion": "1.2",
        "redisConfiguration": {
          "maxmemory-reserved": "[if(equals(parameters('environment'), 'dev'), '2', '125')]",
          "maxfragmentationmemory-reserved": "[if(equals(parameters('environment'), 'dev'), '2', '125')]",
          "maxmemory-delta": "[if(equals(parameters('environment'), 'dev'), '2', '125')]"
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    }
  ],
  "outputs": {
    "webAppName": {
      "type": "string",
      "value": "[variables('webAppName')]"
    },
    "staticWebAppName": {
      "type": "string",
      "value": "[variables('staticWebAppName')]"
    },
    "sqlServerName": {
      "type": "string",
      "value": "[variables('sqlServerName')]"
    },
    "sqlDatabaseName": {
      "type": "string",
      "value": "[variables('sqlDatabaseName')]"
    },
    "redisCacheName": {
      "type": "string",
      "value": "[variables('redisCacheName')]"
    },
    "applicationInsightsName": {
      "type": "string",
      "value": "[variables('applicationInsightsName')]"
    }
  }
}